inventory-management-system:.
├───package-lock.json
├───package.json
├───parser.py
├───public
│   │   └───index.html
└───src
        ├───App.css
        ├───App.jsx
        ├───components
    │       │   ├───Header.jsx
    │       │   ├───InventoryDetails.jsx
    │       │   ├───InventoryForm.jsx
    │       │   └───InventoryList.jsx
        ├───index.css
        ├───index.js
        └───services
                └───api.js


inventory-management-system/package.json
{
  "name": "inventory-management-system",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}



inventory-management-system/parser.py
import os

# Specify the directory path here
directory = "C:\\Users\\SAMPATH REDDY\\OneDrive\\Desktop\\serverless-inventory-management-system\\frontend\\inventory-management-system"  # Replace with your directory path
directory_name = os.path.basename(os.path.normpath(directory))
output_file_name = "output.txt"

def print_directory_structure(root_dir, prefix="", output_list=None):
    if output_list is None:
        output_list = []
    
    # Get all entries in the directory
    entries = sorted(os.listdir(root_dir))
    for index, entry in enumerate(entries):
        full_path = os.path.join(root_dir, entry)
        # Skip node_modules
        if entry == "node_modules":
            continue
        # Determine the prefix for the current entry
        is_last = index == len(entries) - 1
        current_prefix = prefix + ("└───" if is_last else "├───")
        if os.path.isdir(full_path):
            output_list.append(f"{prefix}{current_prefix}{entry}")
            # Recursively process subdirectory
            next_prefix = prefix + ("    " if is_last else "│   ")
            print_directory_structure(full_path, next_prefix, output_list)
        else:
            # Skip .gitignore and package_lock.json in directory structure
            if entry not in [".gitignore", "package_lock.json"]:
                output_list.append(f"{prefix}{current_prefix}{entry}")
    
    return output_list

with open(output_file_name, 'w', encoding='utf-8') as output_file:
    # Write directory structure
    output_file.write(f"{directory_name}:.\n")
    dir_structure = print_directory_structure(directory)
    for line in dir_structure:
        output_file.write(line + '\n')
    output_file.write('\n\n')  # Two blank lines after directory structure

    # Write file paths and contents
    for root, dirs, files in os.walk(directory):
        # Skip node_modules directory
        if 'node_modules' in dirs:
            dirs.remove('node_modules')
        
        for file in files:
            # Skip .gitignore and package_lock.json
            if file in ['.gitignore', 'package-lock.json']:
                continue
                
            full_path = os.path.join(root, file)
            relative_path = os.path.relpath(full_path, directory).replace(os.sep, '/')
            output_path = directory_name + '/' + relative_path
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                output_file.write(output_path + '\n')
                output_file.write(content)
                if not content.endswith('\n'):
                    output_file.write('\n')
                output_file.write('\n\n\n')  # Add three blank lines after each file
            except Exception as e:
                print(f"Error reading {full_path}: {e}")



inventory-management-system/public/index.html
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta
            name="description"
            content="Serverless Inventory Management System"
        />
        <title>Inventory Management System</title>
    </head>
    <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="root"></div>
    </body>
</html>



inventory-management-system/src/App.css
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f7fa;
  color: #333;
}

.app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.header {
  background-color: #2c3e50;
  color: white;
  padding: 1rem 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.header h1 {
  margin: 0;
  font-size: 1.5rem;
}

.add-button {
  background-color: #27ae60;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 600;
  transition: background-color 0.3s;
}

.add-button:hover {
  background-color: #2ecc71;
}

.content {
  display: flex;
  flex: 1;
  padding: 2rem;
  gap: 2rem;
}

.inventory-list {
  flex: 1;
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  max-width: 400px;
  height: fit-content;
}

.inventory-list h2 {
  margin-top: 0;
  color: #2c3e50;
  border-bottom: 1px solid #eee;
  padding-bottom: 0.5rem;
}

.inventory-list ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.inventory-list li {
  padding: 12px 16px;
  border-bottom: 1px solid #eee;
  cursor: pointer;
  transition: background-color 0.2s;
}

.inventory-list li:hover {
  background-color: #f8f9fa;
}

.inventory-list li.selected {
  background-color: #ecf0f1;
  border-left: 3px solid #3498db;
}

.item-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.item-name {
  font-weight: 500;
}

.item-quantity {
  color: #7f8c8d;
  font-size: 0.9rem;
}

.item-category {
  font-size: 0.8rem;
  color: #95a5a6;
  margin-top: 4px;
}

.inventory-details,
.inventory-form {
  flex: 2;
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.inventory-details h2,
.inventory-form h2 {
  margin-top: 0;
  color: #2c3e50;
  border-bottom: 1px solid #eee;
  padding-bottom: 0.5rem;
}

.details-content {
  margin-bottom: 2rem;
}

.item-image {
  text-align: center;
  margin-bottom: 1.5rem;
}

.item-image img {
  max-width: 100%;
  max-height: 200px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.detail-row {
  margin-bottom: 1rem;
  display: flex;
}

.detail-label {
  font-weight: 600;
  width: 120px;
  color: #7f8c8d;
}

.detail-value {
  flex: 1;
}

.details-actions {
  display: flex;
  gap: 1rem;
  justify-content: flex-end;
}

.edit-button,
.submit-button {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.edit-button:hover,
.submit-button:hover {
  background-color: #2980b9;
}

.delete-button,
.cancel-button {
  background-color: #e74c3c;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.delete-button:hover,
.cancel-button:hover {
  background-color: #c0392b;
}

.cancel-button {
  background-color: #95a5a6;
}

.cancel-button:hover {
  background-color: #7f8c8d;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #2c3e50;
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

.form-group input:focus,
.form-group textarea:focus {
  border-color: #3498db;
  outline: none;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 2rem;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 1rem;
  margin: 1rem 2rem 0;
  border-radius: 4px;
  border: 1px solid #f5c6cb;
}

.loading {
  color: #7f8c8d;
  font-style: italic;
}

button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

@media (max-width: 768px) {
  .content {
    flex-direction: column;
  }
  
  .inventory-list {
    max-width: none;
  }
}



inventory-management-system/src/App.jsx
// src/App.jsx
import React, { useState, useEffect } from 'react';
import Header from './components/Header';
import InventoryList from './components/InventoryList';
import InventoryForm from './components/InventoryForm';
import InventoryDetails from './components/InventoryDetails';
import { fetchItems, fetchItem, createItem, updateItem, deleteItem } from './services/api';
import './App.css';

function App() {
  const [items, setItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);

  // Fetch all inventory items on component mount
  useEffect(() => {
    fetchInventoryItems();
  }, []);

  const fetchInventoryItems = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await fetchItems();
      setItems(data.items || []);
    } catch (err) {
      setError('Failed to fetch inventory items. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelectItem = async (itemId) => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await fetchItem(itemId);
      setSelectedItem(data.item);
    } catch (err) {
      setError('Failed to fetch item details. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateItem = async (itemData) => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await createItem(itemData);
      setIsFormOpen(false);
      fetchInventoryItems();
      setSelectedItem(response.item);
    } catch (err) {
      setError('Failed to create item. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleUpdateItem = async (itemData) => {
    setIsLoading(true);
    setError(null);
    try {
      await updateItem(itemData);
      setIsFormOpen(false);
      setIsEditing(false);
      fetchInventoryItems();
      const refreshedItem = await fetchItem(itemData.itemId);
      setSelectedItem(refreshedItem.item);
    } catch (err) {
      setError('Failed to update item. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteItem = async (itemId) => {
    if (!window.confirm('Are you sure you want to delete this item?')) return;
    
    setIsLoading(true);
    setError(null);
    try {
      await deleteItem(itemId);
      fetchInventoryItems();
      setSelectedItem(null);
    } catch (err) {
      setError('Failed to delete item. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const openEditForm = (item) => {
    setSelectedItem(item);
    setIsEditing(true);
    setIsFormOpen(true);
  };

  return (
    <div className="app">
      <Header 
        onAddNewClick={() => {
          setSelectedItem(null);
          setIsEditing(false);
          setIsFormOpen(true);
        }}
      />
      
      {error && <div className="error-message">{error}</div>}
      
      <div className="content">
        <InventoryList 
          items={items} 
          isLoading={isLoading} 
          onSelect={handleSelectItem}
          selectedItemId={selectedItem?.itemId}
        />
        
        {selectedItem && !isFormOpen && (
          <InventoryDetails 
            item={selectedItem} 
            onEdit={() => openEditForm(selectedItem)} 
            onDelete={() => handleDeleteItem(selectedItem.itemId)} 
          />
        )}
        
        {isFormOpen && (
          <InventoryForm 
            item={isEditing ? selectedItem : null}
            isEditing={isEditing}
            onSubmit={isEditing ? handleUpdateItem : handleCreateItem}
            onCancel={() => setIsFormOpen(false)}
            isLoading={isLoading}
          />
        )}
      </div>
    </div>
  );
}

export default App;




inventory-management-system/src/index.css
// index.css
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}



inventory-management-system/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



inventory-management-system/src/components/Header.jsx
// src/components/Header.jsx
import React from 'react';

function Header({ onAddNewClick }) {
  return (
    <header className="header">
      <h1>Inventory Management System</h1>
      <button className="add-button" onClick={onAddNewClick}>Add New Item</button>
    </header>
  );
}

export default Header;



inventory-management-system/src/components/InventoryDetails.jsx
import React from 'react';

function InventoryDetails({ item, onEdit, onDelete }) {
  return (
    <div className="inventory-details">
      <h2>Item Details</h2>
      <div className="details-content">
        {item.imageUrl && (
          <div className="item-image">
            <img src={item.imageUrl} alt={item.name} />
          </div>
        )}
        
        <div className="detail-row">
          <span className="detail-label">ID:</span>
          <span className="detail-value">{item.itemId}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Name:</span>
          <span className="detail-value">{item.name}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Description:</span>
          <span className="detail-value">{item.description || 'N/A'}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Quantity:</span>
          <span className="detail-value">{item.quantity}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Price:</span>
          <span className="detail-value">${parseFloat(item.price).toFixed(2)}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Category:</span>
          <span className="detail-value">{item.category || 'N/A'}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Created:</span>
          <span className="detail-value">
            {new Date(item.createdAt).toLocaleDateString()} {new Date(item.createdAt).toLocaleTimeString()}
          </span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Updated:</span>
          <span className="detail-value">
            {new Date(item.updatedAt).toLocaleDateString()} {new Date(item.updatedAt).toLocaleTimeString()}
          </span>
        </div>
      </div>
      <div className="details-actions">
        <button className="edit-button" onClick={onEdit}>Edit</button>
        <button className="delete-button" onClick={onDelete}>Delete</button>
      </div>
    </div>
  );
}

export default InventoryDetails;



inventory-management-system/src/components/InventoryForm.jsx
import React, { useState, useEffect } from 'react';

function InventoryForm({ item, isEditing, onSubmit, onCancel, isLoading }) {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    quantity: 0,
    price: 0,
    category: '',
    imageUrl: ''
  });

  useEffect(() => {
    if (item) {
      setFormData({
        itemId: item.itemId,
        name: item.name || '',
        description: item.description || '',
        quantity: item.quantity || 0,
        price: item.price || 0,
        category: item.category || '',
        imageUrl: item.imageUrl || ''
      });
    }
  }, [item]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'quantity' ? parseInt(value, 10) || 0 : 
              name === 'price' ? parseFloat(value) || 0 : value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <div className="inventory-form">
      <h2>{isEditing ? 'Edit' : 'Add'} Inventory Item</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="name">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            rows="4"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="quantity">Quantity</label>
          <input
            type="number"
            id="quantity"
            name="quantity"
            value={formData.quantity}
            onChange={handleChange}
            min="0"
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="price">Price ($)</label>
          <input
            type="number"
            id="price"
            name="price"
            value={formData.price}
            onChange={handleChange}
            min="0"
            step="0.01"
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="category">Category</label>
          <input
            type="text"
            id="category"
            name="category"
            value={formData.category}
            onChange={handleChange}
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="imageUrl">Image URL</label>
          <input
            type="url"
            id="imageUrl"
            name="imageUrl"
            value={formData.imageUrl}
            onChange={handleChange}
            placeholder="https://example.com/image.jpg"
          />
        </div>
        
        <div className="form-actions">
          <button 
            type="button" 
            className="cancel-button" 
            onClick={onCancel}
            disabled={isLoading}
          >
            Cancel
          </button>
          <button 
            type="submit" 
            className="submit-button" 
            disabled={isLoading}
          >
            {isLoading ? 'Processing...' : isEditing ? 'Update Item' : 'Add Item'}
          </button>
        </div>
      </form>
    </div>
  );
}

export default InventoryForm;



inventory-management-system/src/components/InventoryList.jsx
import React from 'react';

function InventoryList({ items, isLoading, onSelect, selectedItemId }) {
  if (isLoading && items.length === 0) {
    return <div className="inventory-list loading">Loading inventory...</div>;
  }

  return (
    <div className="inventory-list">
      <h2>Inventory Items</h2>
      {items.length === 0 ? (
        <p>No inventory items found.</p>
      ) : (
        <ul>
          {items.map(item => (
            <li 
              key={item.itemId} 
              className={selectedItemId === item.itemId ? 'selected' : ''}
              onClick={() => onSelect(item.itemId)}
            >
              <div className="item-header">
                <span className="item-name">{item.name}</span>
                <span className="item-quantity">Qty: {item.quantity}</span>
              </div>
              {item.category && (
                <div className="item-category">{item.category}</div>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default InventoryList;



inventory-management-system/src/services/api.js
// src/services/api.js
// API Gateway integration layer

const API_ENDPOINT = 'https://i5mmj6bhw1.execute-api.us-east-1.amazonaws.com';

// Fetch all inventory items
export async function fetchItems() {
  try {
    const response = await fetch(`${API_ENDPOINT}/items`);
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `API error: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error fetching items:', error);
    throw error;
  }
}

// Fetch a single inventory item
export async function fetchItem(itemId) {
  try {
    const response = await fetch(`${API_ENDPOINT}/items?itemId=${itemId}`);
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `API error: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error fetching item ${itemId}:`, error);
    throw error;
  }
}

// Create a new inventory item
export async function createItem(itemData) {
  try {
    const response = await fetch(`${API_ENDPOINT}/items`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(itemData),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `API error: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error creating item:', error);
    throw error;
  }
}

// Update an existing inventory item
export async function updateItem(itemData) {
  try {
    const response = await fetch(`${API_ENDPOINT}/items`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(itemData),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `API error: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error updating item ${itemData.itemId}:`, error);
    throw error;
  }
}

// Delete an inventory item
export async function deleteItem(itemId) {
  try {
    const response = await fetch(`${API_ENDPOINT}/items?itemId=${itemId}`, {
      method: 'DELETE',
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `API error: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error deleting item ${itemId}:`, error);
    throw error;
  }
}



